%% Plot the TKE as function of different parameters
% Author:     Daniel Regener Roig
% Supervisor: Arnau Miró Jané
% Date:       17/08/2023
% Program developed for the master's thesis "TFM-220MUAERON- 
% Advanced methods for numerical simulations of turbulent flows"
% ESEIAAT - UPC

% Description: This program uses the data generated by a NORMAL SIMULATION
% (therefore not using the data generated by successive simulations) to
% compare the TKE evolution of some TGV cases. Maybe you want to launch
% grep "TGV_Energy" (somecase)/stdout00.txt > (somecase)/TGV_Energy.txt
% to new simulations to generate the files needed by this func.


clear

% Legend for no model case
% legg = {'AB',...
%     'LF',...
%     'RK4 classic',...
%     'RK4 classic O2',...
%     'RK3 SSP'}
% Legend for modelled cases
legg = {'$N=1024$ AB',...
    'AB WALE',...
    'LF WALE',...
    'RK4 classic WALE',...
    'RK4 classic O2 WALE',...
    'RK3 SSP WALE'};

% Paths for no model cases
% myPaths = {...
        %'/media/dani/e7559606-249b-4ae7-b828-15a408725885/TGV_AB/TGV_Energy.txt',...
        %'/media/dani/e7559606-249b-4ae7-b828-15a408725885/TGV_LF/TGV_Energy.txt',...
        %'/media/dani/e7559606-249b-4ae7-b828-15a408725885/TGV_RK4/TGV_Energy.txt',...
        %'/media/dani/e7559606-249b-4ae7-b828-15a408725885/TGV_RK4a/TGV_Energy.txt',...
        %'/media/dani/e7559606-249b-4ae7-b828-15a408725885/TGV_SSP/TGV_Energy.txt',..
%     };
% Paths for modelled cases
myPaths = {...
    '/media/dani/e7559606-249b-4ae7-b828-15a408725885/TGV_LES3_AB/TGV_Energy.txt',....
    '/media/dani/e7559606-249b-4ae7-b828-15a408725885/TGV_LES3_LF/TGV_Energy.txt',...
    '/media/dani/e7559606-249b-4ae7-b828-15a408725885/TGV_LES3_RK4/TGV_Energy.txt',...
    '/media/dani/e7559606-249b-4ae7-b828-15a408725885/TGV_LES3_RK4a/TGV_Energy.txt',...
    '/media/dani/e7559606-249b-4ae7-b828-15a408725885/TGV_LES3_SSP/TGV_Energy.txt',...
    };

% lines for the plots
lines = {'-','-','-','-','-'};
% markers for the plots
markers = {'none','none','none','none','none'};
% colors for the plots
colors = [[0 0.4470 0.7410];[0.8500 0.3250 0.0980];...
    [0.9290 0.6940 0.1250];[0.4940 0.1840 0.5560];[0.4660 0.6740 0.1880]];
% to save the figures
name_1 = 'TKE_LES.png';
name_2 = 'EPS_LES.png';

% Read the data of SA3 1024^3 AB+CFL to use it as reference
tab_ref = readtable('energy_1024.csv');

for i = 1:length(myPaths)
    % load the table of the case
     tab{i} = readtable(myPaths{i});
     % Compute and store the mean dt
     meandt(i) = max(tab{i}.Var2)/(height(tab{i})-1);
     % interpolat the reference to the abcissas
     interpolated = interp1(tab_ref.Var1,tab_ref.Var2,tab{i}.Var2,...
                                                        'linear','extrap');
     % compute and store the error in the TKE
     error{i} = tab{i}.Var3-interpolated;
end

% plot the TKE evolution for each case
figure
hold on
grid on 
plot(tab_ref.Var1,tab_ref.Var2,'k-');
for i = 1:length(myPaths)
    plot(tab{i}.Var2,tab{i}.Var3,'Color',colors(i,:),'LineStyle',lines{i},...
        'Marker',markers {i});
    fprintf(strcat('Case ',legg{i},'> meandt =',num2str(meandt(i)),'\n'));
end
legend(legg,'Interpreter','latex','Location','northeast','interpreter','latex')
xlabel('Time [s]','interpreter','latex')
ylabel('$E_k$','interpreter','latex')
exportgraphics(gca,name_1,'Resolution',600)

% plot the TKE dissipation for each case (same procedure than
% plot_TKE_EPS.m)
figure
hold on
grid on
xq_ref = linspace(0,25,length(tab_ref.Var1));
h = 25/length(tab_ref.Var1);
fun = interp1(tab_ref.Var1,tab_ref.Var2,xq_ref,'linear','extrap');
predissi = dx_od4(fun,h);
dissi_ref = predissi./max(fun);
plot(xq_ref,dissi_ref,'k-');

for i=1:length(myPaths)

    xq{i} = linspace(0,25,length(tab{i}.Var2));
    h = 25/length(tab{i}.Var2);
    fun = interp1(tab{i}.Var2,tab{i}.Var3,xq{i},'linear','extrap');
    predissi = dx_od4(fun,h);
    dissi = predissi;
   interpolated = interp1(xq_ref,dissi_ref,xq{i},'linear','extrap');
   error_dissi{i} = dissi./max(fun) - interpolated;
   plot(xq{i},dissi./max(fun),'Color',colors(i,:),'LineStyle',lines{i},...
       'Marker',markers {i});

end
legend(legg,'Interpreter','latex')
xlabel('Time [s]','interpreter','latex')
ylabel('$\hat{\epsilon}(E_k)$','interpreter','latex')
exportgraphics(gca,name_2,'Resolution',600)

figure
hold on
grid on
for i=1:length(myPaths)
     plot(tab{i}.Var2,error{i},'Color',colors(i,:),'LineStyle',lines{i},...
         'Marker',markers {i});
end
xlabel('Time [s]','interpreter','latex')
ylabel('Error in $E_k$','interpreter','latex')
legend(legg{2:end},'Interpreter','latex','Location','northwest')

figure
hold on
grid on
for i=1:length(myPaths)
   plot(xq{i},error_dissi{i},'Color',colors(i,:),'LineStyle',lines{i});
end
xlabel('Time [s]','interpreter','latex')
ylabel('Error in $\hat{\epsilon}(E_k)$','interpreter','latex')
legend(legg{2:end},'Interpreter','latex','Location','southeast')



function df = dx_od4(f,h)
    for j=3:length(f)-2
        df(j) = -(-f(j+2)+8*f(j+1)-8*f(j-1)+f(j-2))/(12*h);
    end
    for j = 1:2
        df(j) = -(-3*f(j)+4*f(j+1)-f(j+2))/(2*h);
    end
    for j=length(f)-1:length(f)
        df(j) = -(3*f(j)-4*f(j-1)+f(j-2))/(2*h);
    end
end


