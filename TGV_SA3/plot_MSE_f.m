%% Plot the TKE error as function of different parameters
% Author:     Daniel Regener Roig
% Supervisor: Arnau Miró Jané
% Date:       17/08/2023
% Program developed for the master's thesis "TFM-220MUAERON- 
% Advanced methods for numerical simulations of turbulent flows"
% ESEIAAT - UPC

% Description: This program uses the data generated by the successive
% simulations create by run_some_f.sh and storef in the folders added to
% path. It will plot the error dependence on the security factor, on the
% mean dt and on the number of Poisson solving

clear
% We select the data on 32^3 meshes
addpath("32_f/")
mesh = "32";
% Names of the schemes in the files desired to be included
sch  = {'ABCFL','LFECD','RK4ECD','RK4aECD','SSP3ECD'};
% to legend
leg = {'AB','LF','RK4 classic','RK4 classic O2','RK3 SSP'};
% How many times calls the solver each scheme
poisson4ite = [1 1 4 1 3];
% Marker for each line
markers = {'d-','s-','o-','+-','^-'};
% maximum f to plot in each scheme
fmax.(sch{1}) = 1.2;
fmax.(sch{2}) = 1.1;
fmax.(sch{3}) = 1.8;
fmax.(sch{4}) = 1.6;
fmax.(sch{5}) = 1.4;
% names of the output figures
name_1 = 'f_SA3.pdf';
name_2 = 'dt_SA3.pdf';
name_3 = 'poisson_SA3.pdf';

% Read the data of SA3 1024^3 AB+CFL to use it as reference
tab_ref = readtable("energy_1024.csv");

% for each scheme and for each f needed
for i = 1:length(sch)
    for j = 0.1:0.1:fmax.(sch{i})
        % name of the table to read
        myTab = strcat('energy_',mesh,'_',sch{i},'_f',num2str(j*1000),...
                                                                   '.csv');
        % read table
        tab = readtable(myTab);
        % interpolate the reference to the abcissas of the readed file
        ref_interpolated = interp1(tab_ref.Var1,tab_ref.Var2,tab.Var1,...
                                                        'linear','extrap');
        % Store the mean square error in TKE for this simulation
        MSE.(sch{i})(uint8(j*10)) = mean((tab.Var2-ref_interpolated).^2);
    end
end

% for each scheme
for i = 1:length(sch)
    % Read the _solveStep file
    myFile = strcat(mesh,'_',sch{i},'_solveStep.txt');
    fileID = fopen(myFile,'r');
    formatSpec = "cr_info name solveStep00         n      %d tmin %e tmax %e tavg %e tsum %e\n";
    solveP{i} = fscanf(fileID,formatSpec,[5 Inf]);
    fclose(fileID);
end

figure
hold on
grid on 
for i = 1:length(sch)
    plot(0.1:0.1:fmax.(sch{i}),MSE.(sch{i}),markers{i})     
end
legend(leg,'Interpreter','latex','Location','northwest')
xlabel('Security factor $f$','Interpreter','latex')
ylim([0 300])
ylabel("MSE in ${E}_k$",'Interpreter','latex')
set(gcf,'Position',[100 100 640 320])
exportgraphics(gca,name_1,'Resolution',600)


figure
hold on
grid on 
for i = 1:length(sch)
    plot(solveP{i}(1,:)*poisson4ite(i),MSE.(sch{i}),markers{i})         
end
legend(leg,'Interpreter','latex')
set(gca, 'YScale', 'log')
xlabel('Poisson iterations','Interpreter','latex')
xlim([0 1e3])
ylim([1 100])
ylabel("MSE in ${E}_k$",'Interpreter','latex')
set(gcf,'Position',[100 100 640 320])
exportgraphics(gca,name_2,'Resolution',600)

% Delete the data that presents a shorter delta t for a larger f
for i=1:length(sch)
    j = 1;
    while 1
       if j == length(solveP{i}(1,:))
           break
       end
       if (25/solveP{i}(1,j+1))<(25/solveP{i}(1,j))
           break
       end
       j = j + 1;
    end
    solveP_corrected.(sch{i}) = solveP{i}(1,1:j);
    MSE_corrected.(sch{i}) = MSE.(sch{i})(1:j);
end

figure
hold on
grid on 
for i = 1:length(sch)
    plot(25./solveP_corrected.(sch{i})(1,:),MSE_corrected.(sch{i}),markers{i})         
end
legend(leg,'Location','north','Interpreter','latex')
ylim([0 20])
xlabel('Mean $\Delta t$','Interpreter','latex')
ylabel("MSE in ${E}_k$",'Interpreter','latex')
set(gcf,'Position',[100 100 640 320])
exportgraphics(gca,name_3,'Resolution',600)