%% Plot the TKE and dissipation of TGV for the same security factor
% Author:     Daniel Regener Roig
% Supervisor: Arnau Miró Jané
% Date:       17/08/2023
% Program developed for the master's thesis "TFM-220MUAERON- 
% Advanced methods for numerical simulations of turbulent flows"
% ESEIAAT - UPC

% Description: This program uses the data generated by the successive
% simulations create by run_some_f.sh and stoder in the folders added to
% path. You can select one security factor, and plot the results of
% different cases for this security factor. It is not separed case by case 
% as in RB because the added folders contain the Energy evolution of 334
% simulations. This program is also prepared to plot different f factors 
% for the same scheme. 

clear

% Add the folders containing the pre-generated data, being in meshes 64^3
% and 32^3 respectively
addpath("64_f/","32_f/")

% Contain the suffixes of the schemes desired, you can check inside the
% folders. You can add or remove schemes from this list, but make the whole
% input consistent
sch = {'32_LFECD',...
    '32_RK4ECD',...
    '32_RK4aECD',...
    '32_SSP3ECD',...
    '64_LFECD',...
    '64_RK4ECD',...
    '64_RK4aECD',...
    '64_SSP3ECD'};

% For legend
legg = {'$N=1024$ AB','$N=32$ LF','$N=32$ RK4 classic',...
    '$N=32$ RK4 classic O2','$N=32$ RK3 SSP','$N=64$ LF',...
    '$N=64$ RK4 classic','$N=64$ RK4 classic O2','$N=64$ RK3 SSP'};

factor = 100; % Security factor desired x1000

% List of ordered colors for each scheme in sch
colors = [[0 0.4470 0.7410];[0 0.4470 0.7410];[0 0.4470 0.7410];...
    [0 0.4470 0.7410];[0.8500 0.3250 0.0980];[0.8500 0.3250 0.0980];...
    [0.8500 0.3250 0.0980];[0.8500 0.3250 0.0980]];

% List of lines for each scheme in sch
lines = {'-.','-',':','--','-.','-',':','--'};

% f factor desired for each sch, ordered
f{1} = factor; % just put 100:100:1000 to plot different f factors
f{2} = factor;
f{3} = factor;
f{4} = factor;
f{5} = factor;
f{6} = factor;
f{7} = factor;
f{8} = factor;

% Names for the figures saved
name_1 = 'TKE.png';
name_2 = 'EPS.png';
name_3 = 'eTKE.png';
name_4 = 'eEPS.png';

% Read the data of SA3 1024^3 AB+CFL to use it as reference
tab_ref = readtable('energy_1024.csv');

for i = 1:length(sch)
    for j=1:length(f{i})
        % Read the data file of simulation of i scheme, j security factor
        tab{i,j} = readtable(strcat('energy_',sch{i},'_f',...
                                                num2str(f{i}(j)),'.csv'));
        % obtaimn mean dt
        meandt(i,j) = max(tab{i,j}.Var1)/(height(tab{i,j})-1);
        % Interpolate the reference to the times of the simulation
        interpolated = interp1(tab_ref.Var1,tab_ref.Var2,tab{i,j}.Var1,...
                                                        'linear','extrap');
        % Calculate the dimensional error
        error{i,j} = tab{i,j}.Var2-interpolated;
    end
end

% First figure, TKE evolution
figure
hold on
grid on 
plot(tab_ref.Var1,tab_ref.Var2./max(tab_ref.Var2),'k-');
for i = 1:length(sch)
    for j=1:length(f{i})
        plot(tab{i,j}.Var1,(tab{i,j}.Var2)./max(tab{i,j}.Var2),'Color',...
                                        colors(i,:),'LineStyle',lines{i});
        fprintf(strcat('Case ',sch{i},'_f',num2str(f{i}(j)),...
                                '> meandt =',num2str(meandt(i,j)),'\n'));
    end
end
legend(legg,'Interpreter','Latex','Location','northeast')
xlabel('Time [s]','Interpreter','latex')
ylabel('$$E_k$$','Interpreter','latex')
exportgraphics(gca,name_1,'Resolution',600)

% Second figure, dissipation of TKE evolution
figure
hold on
grid on
% Obtain equally spaced abcissas for the reference
xq_ref = linspace(0,25,length(tab_ref.Var1));
% Obtain the distance between this equally spaced abcissas
h = 25/length(tab_ref.Var1);
% Interpolate to this abcissas
fun = interp1(tab_ref.Var1,tab_ref.Var2,xq_ref,'linear','extrap');
% Calculate the 4th order derivative
predissi = dx_od4(fun,h);
% Normalize
dissi_ref = predissi./max(fun);
% Plot the result
plot(xq_ref,dissi_ref,'k-');

for i=1:length(sch)
    for j = 1:length(f{i})
        % Repeat the same procedure
        xq{i,j} = linspace(0,25,length(tab{i,j}.Var1));
        h = 25/length(tab{i,j}.Var1);
        fun = interp1(tab{i,j}.Var1,tab{i,j}.Var2,xq{i,j},'linear',...
                                                                'extrap');
        predissi = dx_od4(fun,h);
       dissi = predissi;
       % Interpolate to the equally spaced reference
       interpolated = interp1(xq_ref,dissi_ref,xq{i,j},'linear','extrap');
       % Compute the error
       error_dissi{i,j} = dissi./max(fun) - interpolated;
       % Plot the result
       plot(xq{i,j},dissi./max(fun),'Color',colors(i,:),'LineStyle',...
                                                                lines{i});
    end
end
legend(legg,'Interpreter','Latex')
xlabel('Time [s]','Interpreter','latex')
ylabel('$\hat{\epsilon}({E}_k)$','Interpreter','latex')
exportgraphics(gca,name_2,'Resolution',600)

% Third figure, error in TKE
figure
hold on
grid on
for i=1:length(sch)
    for j = 1:length(f{i})
        plot(tab{i,j}.Var1,error{i,j},'Color',colors(i,:),'LineStyle',...
                                                                lines{i});
    end
end
xlabel('Time [s]','Interpreter','latex')
ylabel('Error in ${E}_k$','Interpreter','Latex')
legend(legg{2:end},'Interpreter','Latex','Location','southeast')
exportgraphics(gca,name_3,'Resolution',600)

% Fourth figure, error in dissipation of TKE
figure
hold on
grid on
for i=1:length(sch)
    for j = 1:length(f{i})
        plot(xq{i,j},error_dissi{i,j},'Color',colors(i,:),'LineStyle',...
                                                                lines{i});
    end
end
xlabel('Time [s]','Interpreter','latex')
ylabel('Error in $\hat{\epsilon}({E}_k)$','Interpreter','latex')
legend(legg{2:end},'Interpreter','Latex','Location','southeast')
exportgraphics(gca,name_4,'Resolution',600)


function df = dx_od4(f,h)
    for j=3:length(f)-2
        df(j) = -(-f(j+2)+8*f(j+1)-8*f(j-1)+f(j-2))/(12*h);
    end
    for j = 1:2
        df(j) = -(-3*f(j)+4*f(j+1)-f(j+2))/(2*h);
    end
    for j=length(f)-1:length(f)
        df(j) = -(3*f(j)-4*f(j-1)+f(j-2))/(2*h);
    end
end


